#!/usr/bin/env groovy

def runTestOnDatabase(String database) {
  sh """
  ${activate_venv}
  export COVERAGE_FILE=.coverage-${database}
  coverage run --branch manage.py test --setting tests.settings.${database} --testrunner='xmlrunner.extra.djangotestrunner.XMLTestRunner' || true
  coverage xml -o coverage-${database}.xml
  """
}

pipeline {
  agent { label 'inyoka-slave' }
  options {
    buildDiscarder(logRotator(numToKeepStr: '2'))
    timestamps()
  }
  triggers {
    githubBranches(cancelQueued: true,
                   abortRunning: true,
                   events: [branchCreated(), hashChanged()],
                   preStatus: true,
                   skipFirstRun: true,
                   spec: '',
                   triggerMode: 'HEAVY_HOOKS')
    githubPullRequests(abortRunning: true,
                       cancelQueued: true,
                       events: [Open(), commitChanged(), commentPattern('Build now.')],
                       preStatus: true,
                       skipFirstRun: true,
                       spec: '',
                       triggerMode: 'HEAVY_HOOKS')
  }
  stages {
    stage('Prepare build') {
      parallel {
        stage('Build Virtualenv') {
          steps {
            script {
              requirementshash = sh returnStdout: true,
                                    script: "cat extra/requirements/development.txt extra/requirements/production.txt | sha256sum | awk '{print \$1}'"
              requirementshash = requirementshash.trim()
              venv_path = "~/venvs/${requirementshash}"
              activate_venv = ". ${venv_path}/bin/activate"
            }

            sh """
            if [ ! -d ${venv_path} ]
            then
              virtualenv ${venv_path}
              ${activate_venv}
              pip install unittest-xml-reporting
              pip install -r extra/requirements/development.txt
            fi
            """
          }
        }
        stage('Theme checkout') {
          steps {
            dir('theme-ubuntuusers') {
              script {
                git branch: 'staging', url: 'git@github.com:inyokaproject/theme-ubuntuusers'

                def branch = ""
                try {
                    branch = CHANGE_TARGET
                }
                catch (all) {
                    branch = GIT_BRANCH
                }
                sh """
                git checkout ${branch} || git checkout staging

                npm install
                ./node_modules/grunt-cli/bin/grunt
                """
              }
            }
          }
        }
      }
    }
    stage('Link theme') {
      steps {
        dir('theme-ubuntuusers') {
          sh """
          ${activate_venv}
          python setup.py develop
          """
        }
      }
    }
    stage('Tests & Documentation') {
      parallel {
        stage('PostgreSQL') {
          steps{
            runTestOnDatabase('postgresql')
          }
        }
        stage('SQLite') {
          steps{
            runTestOnDatabase('sqlite')
          }
        }
        stage('Execute BDD tests'){
          environment {
            DJANGO_SETTINGS_MODULE = 'tests.bdd.settings.headless'
            PATH = "$PATH:/usr/lib/chromium-browser/"
          }
          steps {
            sh """
            ${activate_venv}
            coverage run --rcfile tests/bdd/settings/.coveragerc -m behave -f allure_behave.formatter:AllureFormatter -o allure-results --junit --tags=-skip
            coverage html -d bdd_coverage --rcfile tests/bdd/settings/.coveragerc
            """
          }
        }
        stage('Build Documentation') {
          when {
            branch 'staging'
          }
          steps {
            sh """
            ${activate_venv}
            head -n -21 example_development_settings.py > development_settings.py
            echo "SECRET_KEY = 'DEMO'" >> development_settings.py
            make -C docs html
            """

            publishHTML([allowMissing: false,
                         alwaysLinkToLastBuild: false,
                         keepAll: false,
                         reportDir: 'docs/build/html',
                         reportFiles: 'index.html',
                         reportName: 'Inyoka Documentation',
                         reportTitles: ''])
          }
        }
      }
    }
  }
  post {
    always {
        junit 'sqlite.xml,postgresql.xml'
        cobertura coberturaReportFile: 'coverage*.xml', onlyStable: false
        publishHTML([allowMissing: false,
                     alwaysLinkToLastBuild: false,
                     keepAll: false,
                     reportDir: 'bdd_coverage',
                     reportFiles: 'index.html',
                     reportName: 'BDD Coverage',
                     reportTitles: 'BDD Coverage'])
      allure includeProperties: false, jdk: '', results: [[path: 'allure-results']]
    }
  }
}
